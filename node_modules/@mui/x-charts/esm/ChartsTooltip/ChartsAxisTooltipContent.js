import * as React from 'react';
import Typography from '@mui/material/Typography';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { ChartsTooltipCell, ChartsTooltipPaper, ChartsTooltipTable, ChartsTooltipMark, ChartsTooltipRow } from './ChartsTooltipTable';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export function DefaultChartsAxisContent(props) {
  var _axis$valueFormatter;
  const {
    series,
    axis,
    dataIndex,
    axisValue,
    sx,
    classes
  } = props;
  if (dataIndex == null) {
    return null;
  }
  const axisFormatter = (_axis$valueFormatter = axis.valueFormatter) != null ? _axis$valueFormatter : v => v.toLocaleString();
  return /*#__PURE__*/_jsx(ChartsTooltipPaper, {
    sx: sx,
    variant: "outlined",
    className: classes.root,
    children: /*#__PURE__*/_jsxs(ChartsTooltipTable, {
      children: [axisValue != null && /*#__PURE__*/_jsx("thead", {
        children: /*#__PURE__*/_jsx(ChartsTooltipRow, {
          children: /*#__PURE__*/_jsx(ChartsTooltipCell, {
            colSpan: 3,
            children: /*#__PURE__*/_jsx(Typography, {
              children: axisFormatter(axisValue)
            })
          })
        })
      }), /*#__PURE__*/_jsx("tbody", {
        children: series.map(({
          color,
          id,
          label,
          valueFormatter,
          data
        }) => /*#__PURE__*/_jsxs(ChartsTooltipRow, {
          children: [/*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.markCell,
            children: /*#__PURE__*/_jsx(ChartsTooltipMark, {
              ownerState: {
                color
              },
              boxShadow: 1
            })
          }), /*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.labelCell,
            children: label ? /*#__PURE__*/_jsx(Typography, {
              children: label
            }) : null
          }), /*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.valueCell,
            children: /*#__PURE__*/_jsx(Typography, {
              children: valueFormatter(data[dataIndex])
            })
          })]
        }, id))
      })]
    })
  });
}
export function ChartsAxisTooltipContent(props) {
  const {
    content,
    axisData,
    sx,
    classes
  } = props;
  const dataIndex = axisData.x && axisData.x.index;
  const axisValue = axisData.x && axisData.x.value;
  const {
    xAxisIds,
    xAxis
  } = React.useContext(CartesianContext);
  const series = React.useContext(SeriesContext);
  const USED_X_AXIS_ID = xAxisIds[0];
  const relevantSeries = React.useMemo(() => {
    const rep = [];
    Object.keys(series).filter(seriesType => ['bar', 'line', 'scatter'].includes(seriesType)).forEach(seriesType => {
      series[seriesType].seriesOrder.forEach(seriesId => {
        const axisKey = series[seriesType].series[seriesId].xAxisKey;
        if (axisKey === undefined || axisKey === USED_X_AXIS_ID) {
          rep.push(series[seriesType].series[seriesId]);
        }
      });
    });
    return rep;
  }, [USED_X_AXIS_ID, series]);
  const relevantAxis = React.useMemo(() => {
    return xAxis[USED_X_AXIS_ID];
  }, [USED_X_AXIS_ID, xAxis]);
  const Content = content != null ? content : DefaultChartsAxisContent;
  return /*#__PURE__*/_jsx(Content, {
    axisData: axisData,
    series: relevantSeries,
    axis: relevantAxis,
    dataIndex: dataIndex,
    axisValue: axisValue,
    sx: sx,
    classes: classes
  });
}