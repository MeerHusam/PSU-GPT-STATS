"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _d3Shape = require("d3-shape");
var _stackSeries = require("../internals/stackSeries");
var _defaultizeValueFormatter = _interopRequireDefault(require("../internals/defaultizeValueFormatter"));
// For now it's a copy past of bar charts formatter, but maybe will diverge later
const formatter = params => {
  const {
    seriesOrder,
    series
  } = params;
  const stackingGroups = (0, _stackSeries.getStackingGroups)(params);

  // Create a data set with format adapted to d3
  const d3Dataset = [];
  seriesOrder.forEach(id => {
    series[id].data.forEach((value, index) => {
      if (d3Dataset.length <= index) {
        d3Dataset.push({
          [id]: value
        });
      } else {
        d3Dataset[index][id] = value;
      }
    });
  });
  const completedSeries = {};
  stackingGroups.forEach(stackingGroup => {
    // Get stacked values, and derive the domain
    const {
      ids,
      stackingOrder,
      stackingOffset
    } = stackingGroup;
    const stackedSeries = (0, _d3Shape.stack)().keys(ids).order(stackingOrder).offset(stackingOffset)(d3Dataset);
    ids.forEach((id, index) => {
      completedSeries[id] = (0, _extends2.default)({}, series[id], {
        stackedData: stackedSeries[index].map(([a, b]) => [a, b])
      });
    });
  });
  return {
    seriesOrder,
    stackingGroups,
    series: (0, _defaultizeValueFormatter.default)(completedSeries, v => v.toLocaleString())
  };
};
var _default = formatter;
exports.default = _default;