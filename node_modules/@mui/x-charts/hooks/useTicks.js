"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getTicksNumber = getTicksNumber;
var React = _interopRequireWildcard(require("react"));
var _useScale = require("./useScale");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function getTicksNumber(params) {
  const {
    maxTicks = 999,
    minTicks = 2,
    tickSpacing = 50,
    range
  } = params;
  const estimatedTickNumber = Math.floor(Math.abs(range[1] - range[0]) / tickSpacing);
  return Math.min(maxTicks, Math.max(minTicks, estimatedTickNumber));
}
function useTicks(options) {
  const {
    scale,
    ticksNumber,
    valueFormatter
  } = options;
  return React.useMemo(() => {
    // band scale
    if ((0, _useScale.isBandScale)(scale)) {
      const domain = scale.domain();
      return [...domain.map(value => ({
        formattedValue: valueFormatter?.(value) ?? value,
        offset: scale(value) ?? 0,
        labelOffset: scale.bandwidth() / 2
      })), ...(scale.bandwidth() > 0 ? [{
        formattedValue: undefined,
        offset: scale.range()[1],
        labelOffset: 0
      }] : [])];
    }
    return scale.ticks(ticksNumber).map(value => ({
      formattedValue: valueFormatter?.(value) ?? scale.tickFormat(ticksNumber)(value),
      offset: scale(value),
      labelOffset: 0
    }));
  }, [ticksNumber, scale, valueFormatter]);
}
var _default = useTicks;
exports.default = _default;