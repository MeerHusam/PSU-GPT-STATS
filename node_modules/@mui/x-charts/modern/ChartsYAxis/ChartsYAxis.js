import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["scale", "ticksNumber"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_composeClasses as composeClasses } from '@mui/utils';
import { useThemeProps, useTheme } from '@mui/material/styles';
import { CartesianContext } from '../context/CartesianContextProvider';
import { DrawingContext } from '../context/DrawingProvider';
import useTicks from '../hooks/useTicks';
import { Line, Tick, TickLabel, Label, AxisRoot } from '../internals/components/AxisSharedComponents';
import { getAxisUtilityClass } from '../ChartsAxis/axisClasses';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const {
    classes,
    position
  } = ownerState;
  const slots = {
    root: ['root', 'directionY', position],
    line: ['line'],
    tickContainer: ['tickContainer'],
    tick: ['tick'],
    tickLabel: ['tickLabel'],
    label: ['label']
  };
  return composeClasses(slots, getAxisUtilityClass, classes);
};
const defaultProps = {
  position: 'left',
  disableLine: false,
  disableTicks: false,
  tickFontSize: 12,
  labelFontSize: 14,
  tickSize: 6
};
function ChartsYAxis(inProps) {
  const props = useThemeProps({
    props: _extends({}, defaultProps, inProps),
    name: 'MuiChartsYAxis'
  });
  const _React$useContext = React.useContext(CartesianContext),
    _props$axisId = props.axisId,
    {
      yAxis: {
        [_props$axisId]: {
          scale: yScale,
          ticksNumber
        }
      }
    } = _React$useContext,
    settings = _objectWithoutPropertiesLoose(_React$useContext.yAxis[_props$axisId], _excluded);
  const defaultizedProps = _extends({}, defaultProps, settings, props);
  const {
    position,
    disableLine,
    disableTicks,
    tickFontSize,
    label,
    labelFontSize,
    tickSize: tickSizeProp,
    valueFormatter
  } = defaultizedProps;
  const theme = useTheme();
  const classes = useUtilityClasses(_extends({}, defaultizedProps, {
    theme
  }));
  const {
    left,
    top,
    width,
    height
  } = React.useContext(DrawingContext);
  const tickSize = disableTicks ? 4 : tickSizeProp;
  const yTicks = useTicks({
    scale: yScale,
    ticksNumber,
    valueFormatter
  });
  const positionSigne = position === 'right' ? 1 : -1;
  const labelRefPoint = {
    x: positionSigne * (tickFontSize + tickSize + 10),
    y: top + height / 2
  };
  return /*#__PURE__*/_jsxs(AxisRoot, {
    transform: `translate(${position === 'right' ? left + width : left}, 0)`,
    className: classes.root,
    children: [!disableLine && /*#__PURE__*/_jsx(Line, {
      y1: yScale.range()[0],
      y2: yScale.range()[1],
      className: classes.line
    }), yTicks.map(({
      formattedValue,
      offset,
      labelOffset
    }, index) => {
      const xTickLabel = positionSigne * (tickSize + 2);
      const yTickLabel = labelOffset;
      return /*#__PURE__*/_jsxs("g", {
        transform: `translate(0, ${offset})`,
        className: classes.tickContainer,
        children: [!disableTicks && /*#__PURE__*/_jsx(Tick, {
          x2: positionSigne * tickSize,
          className: classes.tick
        }), formattedValue !== undefined && /*#__PURE__*/_jsx(TickLabel, {
          x: xTickLabel,
          y: yTickLabel,
          "transform-origin": `${xTickLabel}px ${yTickLabel}px`,
          sx: {
            fontSize: tickFontSize
          },
          className: classes.tickLabel,
          children: formattedValue.toLocaleString()
        })]
      }, index);
    }), label && /*#__PURE__*/_jsx(Label, _extends({}, labelRefPoint, {
      sx: {
        fontSize: labelFontSize,
        transform: `rotate(${positionSigne * 90}deg)`,
        transformOrigin: `${labelRefPoint.x}px ${labelRefPoint.y}px`
      },
      className: classes.label,
      children: label
    }))]
  });
}
process.env.NODE_ENV !== "production" ? ChartsYAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Id of the axis to render.
   */
  axisId: PropTypes.string.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * If true, the axis line is disabled.
   * @default false
   */
  disableLine: PropTypes.bool,
  /**
   * If true, the ticks are disabled.
   * @default false
   */
  disableTicks: PropTypes.bool,
  /**
   * The fill color of the axis text.
   * @default 'currentColor'
   */
  fill: PropTypes.string,
  /**
   * The label of the axis.
   */
  label: PropTypes.string,
  /**
   * The font size of the axis label.
   * @default 14
   */
  labelFontSize: PropTypes.number,
  /**
   * Position of the axis.
   */
  position: PropTypes.oneOf(['left', 'right']),
  /**
   * The stroke color of the axis line.
   * @default 'currentColor'
   */
  stroke: PropTypes.string,
  /**
   * The font size of the axis ticks text.
   * @default 12
   */
  tickFontSize: PropTypes.number,
  /**
   * The size of the ticks.
   * @default 6
   */
  tickSize: PropTypes.number
} : void 0;
export { ChartsYAxis };