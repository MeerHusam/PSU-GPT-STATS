import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { SeriesContext } from '../context/SeriesContextProvider';
import PieArc from './PieArc';
import PieArcLabel from './PieArcLabel';
import { DrawingContext } from '../context/DrawingProvider';
import { createElement as _createElement } from "react";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
const RATIO = 180 / Math.PI;
function getItemLabel(arcLabel, arcLabelMinAngle, item) {
  if (!arcLabel) {
    return null;
  }
  const angle = (item.endAngle - item.startAngle) * RATIO;
  if (angle < arcLabelMinAngle) {
    return null;
  }
  if (typeof arcLabel === 'string') {
    return item[arcLabel]?.toString();
  }
  return arcLabel(item);
}
export function PiePlot() {
  const seriesData = React.useContext(SeriesContext).pie;
  const {
    left,
    top,
    width,
    height
  } = React.useContext(DrawingContext);
  if (seriesData === undefined) {
    return null;
  }
  const availableRadius = Math.min(width, height) / 2;
  const center = {
    x: left + width / 2,
    y: top + height / 2
  };
  const {
    series,
    seriesOrder
  } = seriesData;
  return /*#__PURE__*/_jsx("g", {
    children: seriesOrder.map(seriesId => {
      const {
        innerRadius,
        outerRadius,
        cornerRadius,
        arcLabel,
        arcLabelMinAngle = 0,
        data,
        cx,
        cy,
        highlighted,
        faded
      } = series[seriesId];
      return /*#__PURE__*/_jsx("g", {
        transform: `translate(${cx === undefined ? center.x : left + cx}, ${cy === undefined ? center.y : top + cy})`,
        children: /*#__PURE__*/_jsxs("g", {
          children: [data.map((item, index) => {
            return /*#__PURE__*/_createElement(PieArc, _extends({}, item, {
              key: item.id,
              innerRadius: innerRadius,
              outerRadius: outerRadius ?? availableRadius,
              cornerRadius: cornerRadius,
              id: seriesId,
              color: item.color,
              dataIndex: index,
              highlightScope: series[seriesId].highlightScope,
              highlighted: highlighted,
              faded: faded
            }));
          }), data.map((item, index) => {
            return /*#__PURE__*/_createElement(PieArcLabel, _extends({}, item, {
              key: item.id,
              innerRadius: innerRadius,
              outerRadius: outerRadius ?? availableRadius,
              cornerRadius: cornerRadius,
              id: seriesId,
              color: item.color,
              dataIndex: index,
              highlightScope: series[seriesId].highlightScope,
              formattedArcLabel: getItemLabel(arcLabel, arcLabelMinAngle, item)
            }));
          })]
        })
      }, seriesId);
    })
  });
}