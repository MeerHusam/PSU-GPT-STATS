"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BarPlot = BarPlot;
var React = _interopRequireWildcard(require("react"));
var _SeriesContextProvider = require("../context/SeriesContextProvider");
var _CartesianContextProvider = require("../context/CartesianContextProvider");
var _useScale = require("../hooks/useScale");
var _BarElement = require("./BarElement");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function BarPlot() {
  const seriesData = React.useContext(_SeriesContextProvider.SeriesContext).bar;
  const axisData = React.useContext(_CartesianContextProvider.CartesianContext);
  if (seriesData === undefined) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    yAxis,
    xAxisIds,
    yAxisIds
  } = axisData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }, groupIndex) => {
      return groupIds.flatMap(seriesId => {
        const xAxisKey = series[seriesId].xAxisKey ?? defaultXAxisId;
        const yAxisKey = series[seriesId].yAxisKey ?? defaultYAxisId;
        const xScale = xAxis[xAxisKey].scale;
        const yScale = yAxis[yAxisKey].scale;
        if (!(0, _useScale.isBandScale)(xScale)) {
          throw new Error(`Axis with id "${xAxisKey}" shoud be of type "band" to display the bar series ${stackingGroups}`);
        }
        if (xAxis[xAxisKey].data === undefined) {
          throw new Error(`Axis with id "${xAxisKey}" shoud have data property`);
        }

        // Currently assuming all bars are vertical
        const bandWidth = xScale.bandwidth();
        const barWidth = 0.9 * bandWidth / stackingGroups.length;
        const offset = 0.05 * bandWidth;

        // @ts-ignore TODO: fix when adding a correct API for customisation
        const {
          stackedData,
          color
        } = series[seriesId];
        return stackedData.map((values, dataIndex) => {
          const baseline = Math.min(...values);
          const value = Math.max(...values);
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_BarElement.BarElement, {
            id: seriesId,
            dataIndex: dataIndex,
            x: xScale(xAxis[xAxisKey].data?.[dataIndex]) + groupIndex * barWidth + offset,
            y: yScale(value),
            height: yScale(baseline) - yScale(value),
            width: barWidth,
            color: color,
            highlightScope: series[seriesId].highlightScope
          }, `${seriesId}-${dataIndex}`);
        });
      });
    })
  });
}