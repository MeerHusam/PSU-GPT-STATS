import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import PropTypes from 'prop-types';
import { ScatterPlot } from './ScatterPlot';
import { ResponsiveChartContainer } from '../ResponsiveChartContainer';
import { ChartsAxis } from '../ChartsAxis';
import { ChartsTooltip } from '../ChartsTooltip';
import { ChartsLegend } from '../ChartsLegend';
import { ChartsAxisHighlight } from '../ChartsAxisHighlight';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function ScatterChart(props) {
  var xAxis = props.xAxis,
    yAxis = props.yAxis,
    series = props.series,
    tooltip = props.tooltip,
    axisHighlight = props.axisHighlight,
    legend = props.legend,
    width = props.width,
    height = props.height,
    margin = props.margin,
    colors = props.colors,
    sx = props.sx,
    topAxis = props.topAxis,
    leftAxis = props.leftAxis,
    rightAxis = props.rightAxis,
    bottomAxis = props.bottomAxis,
    children = props.children;
  return /*#__PURE__*/_jsxs(ResponsiveChartContainer, {
    series: series.map(function (s) {
      return _extends({
        type: 'scatter'
      }, s);
    }),
    width: width,
    height: height,
    margin: margin,
    colors: colors,
    xAxis: xAxis,
    yAxis: yAxis,
    sx: sx,
    children: [/*#__PURE__*/_jsx(ChartsAxis, {
      topAxis: topAxis,
      leftAxis: leftAxis,
      rightAxis: rightAxis,
      bottomAxis: bottomAxis
    }), /*#__PURE__*/_jsx(ScatterPlot, {}), /*#__PURE__*/_jsx(ChartsLegend, _extends({}, legend)), /*#__PURE__*/_jsx(ChartsAxisHighlight, _extends({
      x: "none",
      y: "none"
    }, axisHighlight)), /*#__PURE__*/_jsx(ChartsTooltip, _extends({
      trigger: "item"
    }, tooltip)), children]
  });
}
process.env.NODE_ENV !== "production" ? ScatterChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  axisHighlight: PropTypes.shape({
    x: PropTypes.oneOf(['band', 'line', 'none']),
    y: PropTypes.oneOf(['line', 'none'])
  }),
  /**
   * Indicate which axis to display the bottom of the charts.
   * Can be a string (the id of the axis) or an object `ChartsXAxisProps`
   * @default xAxisIds[0] The id of the first provided axis
   */
  bottomAxis: PropTypes.oneOfType([PropTypes.shape({
    axisId: PropTypes.string.isRequired,
    classes: PropTypes.object,
    disableLine: PropTypes.bool,
    disableTicks: PropTypes.bool,
    fill: PropTypes.string,
    label: PropTypes.string,
    labelFontSize: PropTypes.number,
    position: PropTypes.oneOf(['bottom', 'top']),
    stroke: PropTypes.string,
    tickFontSize: PropTypes.number,
    tickSize: PropTypes.number
  }), PropTypes.string]),
  children: PropTypes.node,
  className: PropTypes.string,
  /**
   * Color palette used to colorize multiple series.
   */
  colors: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.func]),
  desc: PropTypes.string,
  disableAxisListener: PropTypes.bool,
  height: PropTypes.number,
  /**
   * Indicate which axis to display the left of the charts.
   * Can be a string (the id of the axis) or an object `ChartsYAxisProps`
   * @default yAxisIds[0] The id of the first provided axis
   */
  leftAxis: PropTypes.oneOfType([PropTypes.shape({
    axisId: PropTypes.string.isRequired,
    classes: PropTypes.object,
    disableLine: PropTypes.bool,
    disableTicks: PropTypes.bool,
    fill: PropTypes.string,
    label: PropTypes.string,
    labelFontSize: PropTypes.number,
    position: PropTypes.oneOf(['left', 'right']),
    stroke: PropTypes.string,
    tickFontSize: PropTypes.number,
    tickSize: PropTypes.number
  }), PropTypes.string]),
  legend: PropTypes.shape({
    classes: PropTypes.object,
    direction: PropTypes.oneOf(['column', 'row']),
    hidden: PropTypes.bool,
    itemWidth: PropTypes.number,
    markSize: PropTypes.number,
    offset: PropTypes.shape({
      x: PropTypes.number,
      y: PropTypes.number
    }),
    position: PropTypes.shape({
      horizontal: PropTypes.oneOf(['left', 'middle', 'right']).isRequired,
      vertical: PropTypes.oneOf(['bottom', 'middle', 'top']).isRequired
    }),
    spacing: PropTypes.number
  }),
  margin: PropTypes.shape({
    bottom: PropTypes.number,
    left: PropTypes.number,
    right: PropTypes.number,
    top: PropTypes.number
  }),
  /**
   * Indicate which axis to display the right of the charts.
   * Can be a string (the id of the axis) or an object `ChartsYAxisProps`
   * @default null
   */
  rightAxis: PropTypes.oneOfType([PropTypes.shape({
    axisId: PropTypes.string.isRequired,
    classes: PropTypes.object,
    disableLine: PropTypes.bool,
    disableTicks: PropTypes.bool,
    fill: PropTypes.string,
    label: PropTypes.string,
    labelFontSize: PropTypes.number,
    position: PropTypes.oneOf(['left', 'right']),
    stroke: PropTypes.string,
    tickFontSize: PropTypes.number,
    tickSize: PropTypes.number
  }), PropTypes.string]),
  series: PropTypes.arrayOf(PropTypes.shape({
    color: PropTypes.string,
    data: PropTypes.arrayOf(PropTypes.shape({
      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
      x: PropTypes.number.isRequired,
      y: PropTypes.number.isRequired
    })).isRequired,
    highlightScope: PropTypes.shape({
      faded: PropTypes.oneOf(['global', 'none', 'series']),
      highlighted: PropTypes.oneOf(['item', 'none', 'series'])
    }),
    id: PropTypes.string,
    label: PropTypes.string,
    markerSize: PropTypes.number,
    type: PropTypes.oneOf(['scatter']),
    valueFormatter: PropTypes.func,
    xAxisKey: PropTypes.string,
    yAxisKey: PropTypes.string
  })).isRequired,
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  title: PropTypes.string,
  tooltip: PropTypes.shape({
    axisContent: PropTypes.elementType,
    classes: PropTypes.object,
    itemContent: PropTypes.elementType,
    trigger: PropTypes.oneOf(['axis', 'item', 'none'])
  }),
  /**
   * Indicate which axis to display the top of the charts.
   * Can be a string (the id of the axis) or an object `ChartsXAxisProps`
   * @default null
   */
  topAxis: PropTypes.oneOfType([PropTypes.shape({
    axisId: PropTypes.string.isRequired,
    classes: PropTypes.object,
    disableLine: PropTypes.bool,
    disableTicks: PropTypes.bool,
    fill: PropTypes.string,
    label: PropTypes.string,
    labelFontSize: PropTypes.number,
    position: PropTypes.oneOf(['bottom', 'top']),
    stroke: PropTypes.string,
    tickFontSize: PropTypes.number,
    tickSize: PropTypes.number
  }), PropTypes.string]),
  viewBox: PropTypes.shape({
    height: PropTypes.number,
    width: PropTypes.number,
    x: PropTypes.number,
    y: PropTypes.number
  }),
  width: PropTypes.number,
  xAxis: PropTypes.arrayOf(PropTypes.shape({
    axisId: PropTypes.string,
    classes: PropTypes.object,
    data: PropTypes.array,
    disableLine: PropTypes.bool,
    disableTicks: PropTypes.bool,
    fill: PropTypes.string,
    id: PropTypes.string,
    label: PropTypes.string,
    labelFontSize: PropTypes.number,
    max: PropTypes.number,
    maxTicks: PropTypes.number,
    min: PropTypes.number,
    minTicks: PropTypes.number,
    position: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),
    scaleType: PropTypes.oneOf(['band', 'linear', 'log', 'point', 'pow', 'sqrt', 'time', 'utc']),
    stroke: PropTypes.string,
    tickFontSize: PropTypes.number,
    tickSize: PropTypes.number,
    tickSpacing: PropTypes.number,
    valueFormatter: PropTypes.func
  })),
  yAxis: PropTypes.arrayOf(PropTypes.shape({
    axisId: PropTypes.string,
    classes: PropTypes.object,
    data: PropTypes.array,
    disableLine: PropTypes.bool,
    disableTicks: PropTypes.bool,
    fill: PropTypes.string,
    id: PropTypes.string,
    label: PropTypes.string,
    labelFontSize: PropTypes.number,
    max: PropTypes.number,
    maxTicks: PropTypes.number,
    min: PropTypes.number,
    minTicks: PropTypes.number,
    position: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),
    scaleType: PropTypes.oneOf(['band', 'linear', 'log', 'point', 'pow', 'sqrt', 'time', 'utc']),
    stroke: PropTypes.string,
    tickFontSize: PropTypes.number,
    tickSize: PropTypes.number,
    tickSpacing: PropTypes.number,
    valueFormatter: PropTypes.func
  }))
} : void 0;
export { ScatterChart };