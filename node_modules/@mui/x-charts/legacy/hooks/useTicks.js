import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import * as React from 'react';
import { isBandScale } from './useScale';
export function getTicksNumber(params) {
  var _params$maxTicks = params.maxTicks,
    maxTicks = _params$maxTicks === void 0 ? 999 : _params$maxTicks,
    _params$minTicks = params.minTicks,
    minTicks = _params$minTicks === void 0 ? 2 : _params$minTicks,
    _params$tickSpacing = params.tickSpacing,
    tickSpacing = _params$tickSpacing === void 0 ? 50 : _params$tickSpacing,
    range = params.range;
  var estimatedTickNumber = Math.floor(Math.abs(range[1] - range[0]) / tickSpacing);
  return Math.min(maxTicks, Math.max(minTicks, estimatedTickNumber));
}
function useTicks(options) {
  var scale = options.scale,
    ticksNumber = options.ticksNumber,
    valueFormatter = options.valueFormatter;
  return React.useMemo(function () {
    // band scale
    if (isBandScale(scale)) {
      var domain = scale.domain();
      return [].concat(_toConsumableArray(domain.map(function (value) {
        var _valueFormatter, _scale;
        return {
          formattedValue: (_valueFormatter = valueFormatter == null ? void 0 : valueFormatter(value)) != null ? _valueFormatter : value,
          offset: (_scale = scale(value)) != null ? _scale : 0,
          labelOffset: scale.bandwidth() / 2
        };
      })), _toConsumableArray(scale.bandwidth() > 0 ? [{
        formattedValue: undefined,
        offset: scale.range()[1],
        labelOffset: 0
      }] : []));
    }
    return scale.ticks(ticksNumber).map(function (value) {
      var _valueFormatter2;
      return {
        formattedValue: (_valueFormatter2 = valueFormatter == null ? void 0 : valueFormatter(value)) != null ? _valueFormatter2 : scale.tickFormat(ticksNumber)(value),
        offset: scale(value),
        labelOffset: 0
      };
    });
  }, [ticksNumber, scale, valueFormatter]);
}
export default useTicks;