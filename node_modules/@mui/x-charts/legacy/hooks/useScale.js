import { scaleLog, scalePow, scaleSqrt, scaleTime, scaleUtc, scaleLinear } from 'd3-scale';
export function getScale(scaleType, domain, range) {
  switch (scaleType) {
    case 'log':
      return scaleLog(domain, range);
    case 'pow':
      return scalePow(domain, range);
    case 'sqrt':
      return scaleSqrt(domain, range);
    case 'time':
      return scaleTime(domain, range);
    case 'utc':
      return scaleUtc(domain, range);
    default:
      return scaleLinear(domain, range);
  }
}
export function isBandScale(scale) {
  return scale.bandwidth !== undefined;
}

/**
 * For a given scale return a function that map value to their position.
 * Usefull when dealing with specific scale such as band.
 * @param scale The scale to use
 * @returns (value: any) => number
 */
export function getValueToPositionMapper(scale) {
  if (isBandScale(scale)) {
    return function (value) {
      return scale(value) + scale.bandwidth() / 2;
    };
  }
  return function (value) {
    return scale(value);
  };
}