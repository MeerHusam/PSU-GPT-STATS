import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import * as React from 'react';
import { scaleBand, scalePoint } from 'd3-scale';
import PropTypes from 'prop-types';
import { getExtremumX as getBarExtremumX, getExtremumY as getBarExtremumY } from '../BarChart/extremums';
import { getExtremumX as getScatterExtremumX, getExtremumY as getScatterExtremumY } from '../ScatterChart/extremums';
import { getExtremumX as getLineExtremumX, getExtremumY as getLineExtremumY } from '../LineChart/extremums';
import { getScale } from '../hooks/useScale';
import { DrawingContext } from './DrawingProvider';
import { SeriesContext } from './SeriesContextProvider';
import { DEFAULT_X_AXIS_KEY, DEFAULT_Y_AXIS_KEY } from '../constants';
import { getTicksNumber } from '../hooks/useTicks';
import { jsx as _jsx } from "react/jsx-runtime";
// TODO: those might be better placed in a distinct file
var xExtremumGetters = {
  bar: getBarExtremumX,
  scatter: getScatterExtremumX,
  line: getLineExtremumX
};
var yExtremumGetters = {
  bar: getBarExtremumY,
  scatter: getScatterExtremumY,
  line: getLineExtremumY
};
export var CartesianContext = /*#__PURE__*/React.createContext({
  xAxis: {},
  yAxis: {},
  xAxisIds: [],
  yAxisIds: []
});
function CartesianContextProvider(_ref) {
  var xAxis = _ref.xAxis,
    yAxis = _ref.yAxis,
    children = _ref.children;
  var formattedSeries = React.useContext(SeriesContext);
  var drawingArea = React.useContext(DrawingContext);
  var value = React.useMemo(function () {
    var _xAxis$map, _yAxis$map;
    var axisExtremumCallback = function axisExtremumCallback(acc, chartType, axis, getters, isDefaultAxis) {
      var _ref2, _formattedSeries$char;
      var getter = getters[chartType];
      var series = (_ref2 = (_formattedSeries$char = formattedSeries[chartType]) == null ? void 0 : _formattedSeries$char.series) != null ? _ref2 : {};
      var _getter = getter({
          series: series,
          axis: axis,
          isDefaultAxis: isDefaultAxis
        }),
        _getter2 = _slicedToArray(_getter, 2),
        minChartTypeData = _getter2[0],
        maxChartTypeData = _getter2[1];
      var _acc = _slicedToArray(acc, 2),
        minData = _acc[0],
        maxData = _acc[1];
      if (minData === null || maxData === null) {
        return [minChartTypeData, maxChartTypeData];
      }
      if (minChartTypeData === null || maxChartTypeData === null) {
        return [minData, maxData];
      }
      return [Math.min(minChartTypeData, minData), Math.max(maxChartTypeData, maxData)];
    };
    var getAxisExtremum = function getAxisExtremum(axis, getters, isDefaultAxis) {
      var charTypes = Object.keys(getters);
      return charTypes.reduce(function (acc, charType) {
        return axisExtremumCallback(acc, charType, axis, getters, isDefaultAxis);
      }, [null, null]);
    };
    var allXAxis = [].concat(_toConsumableArray((_xAxis$map = xAxis == null ? void 0 : xAxis.map(function (axis, index) {
      return _extends({
        id: "deaultized-x-axis-".concat(index)
      }, axis);
    })) != null ? _xAxis$map : []), _toConsumableArray(xAxis === undefined || xAxis.findIndex(function (_ref3) {
      var id = _ref3.id;
      return id === DEFAULT_X_AXIS_KEY;
    }) === -1 ? [{
      id: DEFAULT_X_AXIS_KEY,
      scaleType: 'linear'
    }] : []));
    var completedXAxis = {};
    allXAxis.forEach(function (axis, axisIndex) {
      var _axis$scaleType, _axis$min, _axis$max, _axis$min2, _axis$max2;
      var isDefaultAxis = axisIndex === 0;
      var _getAxisExtremum = getAxisExtremum(axis, xExtremumGetters, isDefaultAxis),
        _getAxisExtremum2 = _slicedToArray(_getAxisExtremum, 2),
        minData = _getAxisExtremum2[0],
        maxData = _getAxisExtremum2[1];
      var scaleType = (_axis$scaleType = axis.scaleType) != null ? _axis$scaleType : 'linear';
      var range = [drawingArea.left, drawingArea.left + drawingArea.width];
      if (scaleType === 'band') {
        completedXAxis[axis.id] = _extends({}, axis, {
          scaleType: scaleType,
          scale: scaleBand(axis.data, range),
          ticksNumber: axis.data.length
        });
        return;
      }
      if (scaleType === 'point') {
        completedXAxis[axis.id] = _extends({}, axis, {
          scaleType: scaleType,
          scale: scalePoint(axis.data, range),
          ticksNumber: axis.data.length
        });
        return;
      }
      var extremums = [(_axis$min = axis.min) != null ? _axis$min : minData, (_axis$max = axis.max) != null ? _axis$max : maxData];
      var ticksNumber = getTicksNumber(_extends({}, axis, {
        range: range
      }));
      var niceScale = getScale(scaleType, extremums, range).nice(ticksNumber);
      var niceDomain = niceScale.domain();
      var domain = [(_axis$min2 = axis.min) != null ? _axis$min2 : niceDomain[0], (_axis$max2 = axis.max) != null ? _axis$max2 : niceDomain[1]];
      completedXAxis[axis.id] = _extends({}, axis, {
        scaleType: scaleType,
        scale: niceScale.domain(domain),
        ticksNumber: ticksNumber
      });
    });
    var allYAxis = [].concat(_toConsumableArray((_yAxis$map = yAxis == null ? void 0 : yAxis.map(function (axis, index) {
      return _extends({
        id: "deaultized-y-axis-".concat(index)
      }, axis);
    })) != null ? _yAxis$map : []), _toConsumableArray(yAxis === undefined || yAxis.findIndex(function (_ref4) {
      var id = _ref4.id;
      return id === DEFAULT_Y_AXIS_KEY;
    }) === -1 ? [{
      id: DEFAULT_Y_AXIS_KEY,
      scaleType: 'linear'
    }] : []));
    var completedYAxis = {};
    allYAxis.forEach(function (axis, axisIndex) {
      var _axis$scaleType2, _axis$min3, _axis$max3, _axis$min4, _axis$max4;
      var isDefaultAxis = axisIndex === 0;
      var _getAxisExtremum3 = getAxisExtremum(axis, yExtremumGetters, isDefaultAxis),
        _getAxisExtremum4 = _slicedToArray(_getAxisExtremum3, 2),
        minData = _getAxisExtremum4[0],
        maxData = _getAxisExtremum4[1];
      var range = [drawingArea.top + drawingArea.height, drawingArea.top];
      var scaleType = (_axis$scaleType2 = axis.scaleType) != null ? _axis$scaleType2 : 'linear';
      if (scaleType === 'band') {
        completedYAxis[axis.id] = _extends({}, axis, {
          scaleType: scaleType,
          scale: scaleBand(axis.data, range),
          ticksNumber: axis.data.length
        });
        return;
      }
      if (scaleType === 'point') {
        completedYAxis[axis.id] = _extends({}, axis, {
          scaleType: scaleType,
          scale: scalePoint(axis.data, range),
          ticksNumber: axis.data.length
        });
        return;
      }
      var extremums = [(_axis$min3 = axis.min) != null ? _axis$min3 : minData, (_axis$max3 = axis.max) != null ? _axis$max3 : maxData];
      var ticksNumber = getTicksNumber(_extends({}, axis, {
        range: range
      }));
      var niceScale = getScale(scaleType, extremums, range).nice(ticksNumber);
      var niceDomain = niceScale.domain();
      var domain = [(_axis$min4 = axis.min) != null ? _axis$min4 : niceDomain[0], (_axis$max4 = axis.max) != null ? _axis$max4 : niceDomain[1]];
      completedYAxis[axis.id] = _extends({}, axis, {
        scaleType: scaleType,
        scale: niceScale.domain(domain),
        ticksNumber: ticksNumber
      });
    });
    return {
      xAxis: completedXAxis,
      yAxis: completedYAxis,
      xAxisIds: allXAxis.map(function (_ref5) {
        var id = _ref5.id;
        return id;
      }),
      yAxisIds: allYAxis.map(function (_ref6) {
        var id = _ref6.id;
        return id;
      })
    };
  }, [drawingArea.height, drawingArea.left, drawingArea.top, drawingArea.width, formattedSeries, xAxis, yAxis]);

  // @ts-ignore
  return /*#__PURE__*/_jsx(CartesianContext.Provider, {
    value: value,
    children: children
  });
}
process.env.NODE_ENV !== "production" ? CartesianContextProvider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  children: PropTypes.node,
  xAxis: PropTypes.arrayOf(PropTypes.shape({
    axisId: PropTypes.string,
    classes: PropTypes.object,
    data: PropTypes.array,
    disableLine: PropTypes.bool,
    disableTicks: PropTypes.bool,
    fill: PropTypes.string,
    id: PropTypes.string,
    label: PropTypes.string,
    labelFontSize: PropTypes.number,
    max: PropTypes.number,
    maxTicks: PropTypes.number,
    min: PropTypes.number,
    minTicks: PropTypes.number,
    position: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),
    scaleType: PropTypes.oneOf(['band', 'linear', 'log', 'point', 'pow', 'sqrt', 'time', 'utc']),
    stroke: PropTypes.string,
    tickFontSize: PropTypes.number,
    tickSize: PropTypes.number,
    tickSpacing: PropTypes.number,
    valueFormatter: PropTypes.func
  })),
  yAxis: PropTypes.arrayOf(PropTypes.shape({
    axisId: PropTypes.string,
    classes: PropTypes.object,
    data: PropTypes.array,
    disableLine: PropTypes.bool,
    disableTicks: PropTypes.bool,
    fill: PropTypes.string,
    id: PropTypes.string,
    label: PropTypes.string,
    labelFontSize: PropTypes.number,
    max: PropTypes.number,
    maxTicks: PropTypes.number,
    min: PropTypes.number,
    minTicks: PropTypes.number,
    position: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),
    scaleType: PropTypes.oneOf(['band', 'linear', 'log', 'point', 'pow', 'sqrt', 'time', 'utc']),
    stroke: PropTypes.string,
    tickFontSize: PropTypes.number,
    tickSize: PropTypes.number,
    tickSpacing: PropTypes.number,
    valueFormatter: PropTypes.func
  }))
} : void 0;
export { CartesianContextProvider };