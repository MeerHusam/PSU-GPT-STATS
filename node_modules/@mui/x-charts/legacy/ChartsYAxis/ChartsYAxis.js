import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["scale", "ticksNumber"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_composeClasses as composeClasses } from '@mui/utils';
import { useThemeProps, useTheme } from '@mui/material/styles';
import { CartesianContext } from '../context/CartesianContextProvider';
import { DrawingContext } from '../context/DrawingProvider';
import useTicks from '../hooks/useTicks';
import { Line, Tick, TickLabel, Label, AxisRoot } from '../internals/components/AxisSharedComponents';
import { getAxisUtilityClass } from '../ChartsAxis/axisClasses';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var useUtilityClasses = function useUtilityClasses(ownerState) {
  var classes = ownerState.classes,
    position = ownerState.position;
  var slots = {
    root: ['root', 'directionY', position],
    line: ['line'],
    tickContainer: ['tickContainer'],
    tick: ['tick'],
    tickLabel: ['tickLabel'],
    label: ['label']
  };
  return composeClasses(slots, getAxisUtilityClass, classes);
};
var defaultProps = {
  position: 'left',
  disableLine: false,
  disableTicks: false,
  tickFontSize: 12,
  labelFontSize: 14,
  tickSize: 6
};
function ChartsYAxis(inProps) {
  var props = useThemeProps({
    props: _extends({}, defaultProps, inProps),
    name: 'MuiChartsYAxis'
  });
  var _React$useContext = React.useContext(CartesianContext),
    _React$useContext$yAx = _React$useContext.yAxis[props.axisId],
    yScale = _React$useContext$yAx.scale,
    ticksNumber = _React$useContext$yAx.ticksNumber,
    settings = _objectWithoutProperties(_React$useContext$yAx, _excluded);
  var defaultizedProps = _extends({}, defaultProps, settings, props);
  var position = defaultizedProps.position,
    disableLine = defaultizedProps.disableLine,
    disableTicks = defaultizedProps.disableTicks,
    tickFontSize = defaultizedProps.tickFontSize,
    label = defaultizedProps.label,
    labelFontSize = defaultizedProps.labelFontSize,
    tickSizeProp = defaultizedProps.tickSize,
    valueFormatter = defaultizedProps.valueFormatter;
  var theme = useTheme();
  var classes = useUtilityClasses(_extends({}, defaultizedProps, {
    theme: theme
  }));
  var _React$useContext2 = React.useContext(DrawingContext),
    left = _React$useContext2.left,
    top = _React$useContext2.top,
    width = _React$useContext2.width,
    height = _React$useContext2.height;
  var tickSize = disableTicks ? 4 : tickSizeProp;
  var yTicks = useTicks({
    scale: yScale,
    ticksNumber: ticksNumber,
    valueFormatter: valueFormatter
  });
  var positionSigne = position === 'right' ? 1 : -1;
  var labelRefPoint = {
    x: positionSigne * (tickFontSize + tickSize + 10),
    y: top + height / 2
  };
  return /*#__PURE__*/_jsxs(AxisRoot, {
    transform: "translate(".concat(position === 'right' ? left + width : left, ", 0)"),
    className: classes.root,
    children: [!disableLine && /*#__PURE__*/_jsx(Line, {
      y1: yScale.range()[0],
      y2: yScale.range()[1],
      className: classes.line
    }), yTicks.map(function (_ref, index) {
      var formattedValue = _ref.formattedValue,
        offset = _ref.offset,
        labelOffset = _ref.labelOffset;
      var xTickLabel = positionSigne * (tickSize + 2);
      var yTickLabel = labelOffset;
      return /*#__PURE__*/_jsxs("g", {
        transform: "translate(0, ".concat(offset, ")"),
        className: classes.tickContainer,
        children: [!disableTicks && /*#__PURE__*/_jsx(Tick, {
          x2: positionSigne * tickSize,
          className: classes.tick
        }), formattedValue !== undefined && /*#__PURE__*/_jsx(TickLabel, {
          x: xTickLabel,
          y: yTickLabel,
          "transform-origin": "".concat(xTickLabel, "px ").concat(yTickLabel, "px"),
          sx: {
            fontSize: tickFontSize
          },
          className: classes.tickLabel,
          children: formattedValue.toLocaleString()
        })]
      }, index);
    }), label && /*#__PURE__*/_jsx(Label, _extends({}, labelRefPoint, {
      sx: {
        fontSize: labelFontSize,
        transform: "rotate(".concat(positionSigne * 90, "deg)"),
        transformOrigin: "".concat(labelRefPoint.x, "px ").concat(labelRefPoint.y, "px")
      },
      className: classes.label,
      children: label
    }))]
  });
}
process.env.NODE_ENV !== "production" ? ChartsYAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Id of the axis to render.
   */
  axisId: PropTypes.string.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * If true, the axis line is disabled.
   * @default false
   */
  disableLine: PropTypes.bool,
  /**
   * If true, the ticks are disabled.
   * @default false
   */
  disableTicks: PropTypes.bool,
  /**
   * The fill color of the axis text.
   * @default 'currentColor'
   */
  fill: PropTypes.string,
  /**
   * The label of the axis.
   */
  label: PropTypes.string,
  /**
   * The font size of the axis label.
   * @default 14
   */
  labelFontSize: PropTypes.number,
  /**
   * Position of the axis.
   */
  position: PropTypes.oneOf(['left', 'right']),
  /**
   * The stroke color of the axis line.
   * @default 'currentColor'
   */
  stroke: PropTypes.string,
  /**
   * The font size of the axis ticks text.
   * @default 12
   */
  tickFontSize: PropTypes.number,
  /**
   * The size of the ticks.
   * @default 6
   */
  tickSize: PropTypes.number
} : void 0;
export { ChartsYAxis };