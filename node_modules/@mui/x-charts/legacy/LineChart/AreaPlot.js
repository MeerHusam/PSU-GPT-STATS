import * as React from 'react';
import { area as d3Area } from 'd3-shape';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { AreaElement } from './AreaElement';
import { getValueToPositionMapper } from '../hooks/useScale';
import getCurveFactory from '../internals/getCurve';
import { jsx as _jsx } from "react/jsx-runtime";
export function AreaPlot() {
  var seriesData = React.useContext(SeriesContext).line;
  var axisData = React.useContext(CartesianContext);
  if (seriesData === undefined) {
    return null;
  }
  var series = seriesData.series,
    stackingGroups = seriesData.stackingGroups;
  var xAxis = axisData.xAxis,
    yAxis = axisData.yAxis,
    xAxisIds = axisData.xAxisIds,
    yAxisIds = axisData.yAxisIds;
  var defaultXAxisId = xAxisIds[0];
  var defaultYAxisId = yAxisIds[0];
  return /*#__PURE__*/_jsx("g", {
    children: stackingGroups.flatMap(function (_ref) {
      var groupIds = _ref.ids;
      return groupIds.flatMap(function (seriesId) {
        var _series$seriesId = series[seriesId],
          _series$seriesId$xAxi = _series$seriesId.xAxisKey,
          xAxisKey = _series$seriesId$xAxi === void 0 ? defaultXAxisId : _series$seriesId$xAxi,
          _series$seriesId$yAxi = _series$seriesId.yAxisKey,
          yAxisKey = _series$seriesId$yAxi === void 0 ? defaultYAxisId : _series$seriesId$yAxi,
          stackedData = _series$seriesId.stackedData;
        var xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        var yScale = yAxis[yAxisKey].scale;
        var xData = xAxis[xAxisKey].data;
        if (xData === undefined) {
          throw new Error("Axis of id \"".concat(xAxisKey, "\" should have data property to be able to display a line plot."));
        }
        var areaPath = d3Area().x(function (d) {
          return xScale(d.x);
        }).y0(function (d) {
          return yScale(d.y[0]);
        }).y1(function (d) {
          return yScale(d.y[1]);
        });
        var curve = getCurveFactory(series[seriesId].curve);
        var d3Data = xData == null ? void 0 : xData.map(function (x, index) {
          return {
            x: x,
            y: stackedData[index]
          };
        });
        return !!series[seriesId].area && /*#__PURE__*/_jsx(AreaElement, {
          id: seriesId,
          d: areaPath.curve(curve)(d3Data) || undefined,
          color: series[seriesId].color,
          highlightScope: series[seriesId].highlightScope
        }, seriesId);
      });
    })
  });
}