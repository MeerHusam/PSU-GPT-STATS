import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["id", "dataIndex", "classes", "color", "highlightScope"];
import * as React from 'react';
import composeClasses from '@mui/utils/composeClasses';
import generateUtilityClass from '@mui/utils/generateUtilityClass';
import { styled } from '@mui/material/styles';
import { color as d3Color } from 'd3-color';
import generateUtilityClasses from '@mui/utils/generateUtilityClasses';
import { getIsFaded, getIsHighlighted, useInteractionItemProps } from '../hooks/useInteractionItemProps';
import { InteractionContext } from '../context/InteractionProvider';
import { jsx as _jsx } from "react/jsx-runtime";
export function getBarElementUtilityClass(slot) {
  return generateUtilityClass('MuiBarElement', slot);
}
export var lineElementClasses = generateUtilityClasses('MuiBarElement', ['root']);
var useUtilityClasses = function useUtilityClasses(ownerState) {
  var classes = ownerState.classes,
    id = ownerState.id;
  var slots = {
    root: ['root', "series-".concat(id)]
  };
  return composeClasses(slots, getBarElementUtilityClass, classes);
};
var BarElementPath = styled('rect', {
  name: 'MuiBarElement',
  slot: 'Root',
  overridesResolver: function overridesResolver(_, styles) {
    return styles.root;
  }
})(function (_ref) {
  var ownerState = _ref.ownerState;
  return {
    stroke: 'none',
    shapeRendering: 'crispEdges',
    fill: ownerState.isHighlighted ? d3Color(ownerState.color).brighter(0.5).formatHex() : ownerState.color,
    transition: 'opacity 0.2s ease-in, fill 0.2s ease-in',
    opacity: ownerState.isFaded && 0.3 || 1
  };
});
export function BarElement(props) {
  var id = props.id,
    dataIndex = props.dataIndex,
    innerClasses = props.classes,
    color = props.color,
    highlightScope = props.highlightScope,
    other = _objectWithoutProperties(props, _excluded);
  var getInteractionItemProps = useInteractionItemProps(highlightScope);
  var _React$useContext = React.useContext(InteractionContext),
    item = _React$useContext.item;
  var isHighlighted = getIsHighlighted(item, {
    type: 'bar',
    seriesId: id,
    dataIndex: dataIndex
  }, highlightScope);
  var isFaded = !isHighlighted && getIsFaded(item, {
    type: 'bar',
    seriesId: id,
    dataIndex: dataIndex
  }, highlightScope);
  var ownerState = {
    id: id,
    dataIndex: dataIndex,
    classes: innerClasses,
    color: color,
    isFaded: isFaded,
    isHighlighted: isHighlighted
  };
  var classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/_jsx(BarElementPath, _extends({}, other, {
    ownerState: ownerState,
    className: classes.root
  }, getInteractionItemProps({
    type: 'bar',
    seriesId: id,
    dataIndex: dataIndex
  })));
}